INPUT FILE : employee_details.txt
(a) Top 5 employees (employee id and employee name) with highest rating.

(In case two employees have same rating, employee with name coming first in dictionary

should get preference)

Solution :

command to view contents of input file : cat employee_details.txt
To open Pig Grunt Shell : pig - x local 
Load command : A = load 'employee_details.txt' using PigStorage (',') as (id:int,name:chararray,sal:long,rating:int);
command to fetch top rating employees with order of names : B = order A by rating desc,name ;
to limit to 5 rows : C = limit B 5 ;
command to display id ,name : D = foreach C generate id,name ;
to store out put into a file : store D into 'pigout1' using PigStorage(',') ;


(b) Top 3 employees (employee id and employee name) with highest salary, whose employee id

is an odd number.

(In case two employees have same salary, employee with name coming first in dictionary

should get preference)

Solution : 
command to view contents of input file : cat employee_details.txt
To open Pig Grunt Shell : pig - x local 
Load command : A = load 'employee_details.txt' using PigStorage (',') as (id:int,name:chararray,sal:long,rating:int);
command to fetch top rating employees with order of sal and name : B = order A by sal desc,name ;
to fetch id which are odd : C = Filter B by id%2>0 ;
to limit to 3 rows : D = limit C 3 ;
command to display id ,name : E = foreach D generate id,name ;
to store out put into a file : store E into 'pigout1' using PigStorage(',') ;


(c)

Solution :
Command to load input files :
1.A = Load 'employee_details.txt' using PigStorage(',') as (id:int,name:chararray,sal:long,rating:int);
2. B = load 'employee_expenses.txt' as (id:int,expense:long);

command to group B and calculate sum of the expenses
1.grpB = group B by id ;
2.C = foreach grpB generate group,SUM(B.expense) as exp;
3 . C = order C by exp desc ;

Command to use joins and display the output :
1.joinAC = join A by id,C by group ;
2.r1= order joinAC by A::name,C::exp desc ;
3.result = Limit r1 3 ;

